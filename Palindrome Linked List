# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        if not head or not head.next:
            return True
        def reverse(node):
            prev=None
            current=node
            while current:
                x=current.next
                current.next=prev
                prev=current
                current=x
            return prev
        def Middle(node):
            hase=node
            turtle=node
            while hase.next and hase.next.next:
                hase=hase.next.next
                turtle=turtle.next
            return turtle
        middle_node=Middle(head)
        reverse_half=reverse(middle_node.next)
        while reverse_half:
            if reverse_half.val!=head.val:
                return False
            head=head.next
            reverse_half=reverse_half.next
        return True
