class LRUCache:

    def __init__(self, capacity: int):
        self.cache={}
        self.stack=[]
        self.capacity=capacity

    def get(self, key: int) -> int:
        if key in self.cache:
            if key in self.stack:
                self.stack.remove(key)
            self.stack.append(key)
            return self.cache[key]
        else:
            return -1
    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            self.cache[key]=value
        else:
            if len(self.cache)==self.capacity:
                del self.cache[self.stack.pop(0)]
            self.cache[key]=value
        if key in self.stack:
                self.stack.remove(key)
        self.stack.append(key)

# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
