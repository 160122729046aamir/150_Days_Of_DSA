# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def getDirections(self, root, startValue, destValue):
        def helper(node,path,value):
            if not node:
                return False
            if node.val==value:
                return path
            
            path.append('L')
            res=helper(node.left,path,value)
            if res: return res
            path.pop()
            path.append('R')
            res=helper(node.right,path,value)
            if res: return res
            path.pop()

            return False
        start_path=helper(root,[],startValue)
        dest_path=helper(root,[],destValue)
        i=0
        while i<min(len(start_path),len(dest_path)):
            if start_path[i]!=dest_path[i]:
                break
            i+=1
        return "".join(['U']*len(start_path[i:])+dest_path[i:])
